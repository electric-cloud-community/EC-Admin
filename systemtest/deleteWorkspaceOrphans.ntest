# -*-Perl-*-

# deleteWorkspaceOrphans.ntest -
#
# check the deleteWorkspaceOrphans procedure of EC-Admin plugin
#
# Copyright (c) 2015 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;

initCommander();
$::N=$adminSession;

my $pluginKey = "EC-Admin";
my $xpath = $::N->getPlugin($pluginKey);
my $pluginName = $xpath->findvalue("//pluginName")->value;

#-------------------------------------------------------------------------------
# Issue #45: bad links break the procedure
#-------------------------------------------------------------------------------
ntest "Issue_45_badLinks", {}, sub {
  my $dir="/opt/electriccloud/electriccommander/workspace/FAKE_WKS_123456";

  # create FAKE directory with links
  mkdir($dir);
  if (! -d $dir) {
    fail("directory $dir should have been created");
  }
  #system("ls -ail $dir");
  my $res=symlink("/etc/passwd", "$dir/passwd");
  assertEq($res, 1, "Cannot create passwd link");
  $res=symlink("/opt/electric-cloud/foo", "$dir/foo");
  assertEq($res, 1, "Cannot create foo link");
  #system("ls -ail $dir");

  # change time to 2 years back to be deleted
  utime(time(), time()-2*365*24*60*60, $dir);

  my $xpath = $::N->runProcedure($pluginName, {
	procedureName=>"deleteWorkspaceOrphans",
	actualParameter=>[
	    {actualParameterName=>"olderThan", value=>365},
	    {actualParameterName=>"executeDeletion", value=>"true"},
	    {actualParameterName=>"resource", value=>"local"},
	    {actualParameterName=>"verboseMode", value=>"false"},
	    {actualParameterName=>"workspace", value=>"default"}
	]});
  assertOK($xpath, "Failed to launch EC-Admin::deleteWorkspaceOrphans");
  if ($xpath) {
	#get new Job ID
        my $jobId  = $xpath->findvalue("//jobId");
        waitForJob($jobId);
	my $jobData  = $::N->getJobDetails($jobId);
        my $outcome = $jobData->findvalue("//job/outcome");
	assertEq("success", $outcome, "deleteWorkspaceOrphans failed");
  }
  if (-d $dir) {
    fail("orphan should have been deleted");
  }
  rmdir($dir);
};

1;
