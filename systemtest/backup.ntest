# -*-Perl-*-

# backup.ntest -
#
# check the saveAllObjects procedure of EC-Admin plugin
#
# Copyright (c) 2015 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use File::Path;
use ECTest;

initCommander();
$::N=$adminSession;

my $pluginKey = "EC-Admin";
my $xpath = $::N->getPlugin($pluginKey);
my $pluginName = $xpath->findvalue("//pluginName")->value;
my $backupDir="/tmp/BACKUP";

#
# Load EC-Admin_Test which is required by some tests
$xpath=$::N->import({file=>$::gWorkingDirectory . "/data/EC-Admin_Test.xml", force=>1});
  assertOK($xpath, "Cannot import EC-Admin_Test");
#-------------------------------------------------------------------------------
# Test procedure present.
#-------------------------------------------------------------------------------
ntest "checkProcedures", {}, sub {
    assertOK($::N->getProcedure($pluginName, "saveAllObjects"), "procedure saveAllObjects missing");
    assertOK($::N->getProcedure($pluginName, "saveDslObjects"), "procedure saveDslObjects missing");
    assertOK($::N->getProcedure($pluginName, "saveProjects"), "procedure saveProjects is missing");
};

#-------------------------------------------------------------------------------
#  check default resource is local
#-------------------------------------------------------------------------------
ntest "local_resource", {}, sub {

  # check for resource
  my $res=$::N->getProperty("resourceName",
               {
		  projectName   => $pluginName,
		  procedureName => 'saveAllObjects',
		  stepName      => 'grabResource'
		})->findvalue("//value");
  assertEq("local", $res, "Resource must be \"local\"");
};

#-------------------------------------------------------------------------------
# Issue 56: Check for question mark
#-------------------------------------------------------------------------------
ntest "issue 56 question mark", {}, sub {

  my $error=0;
  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"EC-Admin_Test"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue56_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # issue 56: check for file with question mark replaced by _
    if (! -f "${backupDir}/Projects/EC-Admin_Test/Procedures/questionMark/Steps/rerun_.xml") {
      fail("rerun_.xml is missing");
      $error=1;
    }
  }
  # Clean
  rmtree($backupDir);
};

#-------------------------------------------------------------------------------
# Issue 57: group name with "/"
#-------------------------------------------------------------------------------
ntest "issue 57 group with slash", {}, sub {

  my $group="AC/DC";
  my $xpath= $::N->createGroup($group);
  assertOK($xpath, "Failed to create group $group for issue 57");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"AC"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"true"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue57_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for group file with / mark replaced by _
    if (! -f "${backupDir}/Groups/AC_DC.xml") {
      fail("AC_DC.xml group is missing");
    }
  }
  rmtree($backupDir);
  $::N->deleteGroup($group);
};

#-------------------------------------------------------------------------------
#       58: backup gateway
#-------------------------------------------------------------------------------
ntest "issue 58 gateway", {}, sub {

  my $gate="GW58";
  my $res="gw_resource_58";

  $xpath= $::N->createResource($res, {hostName=> "localhost"});
  assertOK($xpath, "Failed to create resource $res");

  $xpath= $::N->createGateway($gate, {
     gatewayDisabled => 0,
     description => "forbackup testing",
     resourceName1 => "local", resourceName2 => $res
    });
  assertOK($xpath, "Failed to create gateway $gate");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>$gate},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"true"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue58_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # issue 58: check for gateway file
    if (! -f "${backupDir}/Gateways/$gate.xml") {
      fail("$gate.xml gate is missing");
    }
  }
  # clean
  rmtree($backupDir);
  $::N->deleteGateway($gate);
  $::N->deleteResource($res);
};

#-------------------------------------------------------------------------------
#       59: backup zones
#-------------------------------------------------------------------------------
ntest "issue 59 zone", {}, sub {

  my $zone="zone59";
  $xpath= $::N->createZone($zone, {description => "for backup testing"});
  assertOK($xpath, "Failed to create zone $zone");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>$zone},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"true"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue59_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # issue 59: check for zone file
    if (! -f "${backupDir}/Zones/$zone.xml") {
      fail("$zone.xml zone is missing");
    }
  }
  # Clean
  rmtree($backupDir);
  $::N->deleteZone($zone);
};

#-------------------------------------------------------------------------------
#  Issue 63: filter pattern
#-------------------------------------------------------------------------------
ntest "issue 63 pattern", {}, sub {
  my $proj="456GHTVF123";
  my $xpath=$::N->createProject($proj);
  assertOK($xpath, "Failed to create project $proj");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"GHTVF"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue63_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check only 1 project was exported
    my $nb=$::N->getProperty("projectExported" , {jobId => $jobId})->findvalue("//value");
    assertEq(1, $nb, "incorrect number of project exported");

    # clean
    rmtree($backupDir);
    $::N->deleteProject($proj);
  }

};

#-------------------------------------------------------------------------------
#  save User
#-------------------------------------------------------------------------------
ntest "export users", {}, sub {

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"admin"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"true"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_users_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check only 1 project was exported
    my $nb=$::N->getProperty("userExported" , {jobId => $jobId})->findvalue("//value");
    assertEq(1, $nb, "incorrect number of user exported");

    # clean
    rmtree($backupDir);
  }
};

#-------------------------------------------------------------------------------
# Issue 77: procedure name with "/"
#-------------------------------------------------------------------------------
ntest "issue 77 procedure with slash", {}, sub {

  my $name="Issue/77";
  my $xpath= $::N->createProject($name);
  assertOK($xpath, "Failed to create project $name for issue 77");

  $xpath= $::N->createProcedure($name, $name);
  assertOK($xpath, "Failed to create procedure $name for issue 77");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"77"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue77_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for project directory file with / mark replaced by _
    if (! -d "${backupDir}/Projects/Issue_77") {
      fail("Issue_77 Project is missing");
    }
    # check for procedure file file with / mark replaced by _
    if (! -f "${backupDir}/Projects/Issue_77/Procedures/Issue_77/Issue_77.xml") {
      fail("Issue_77.xml procedure is missing");
    }
  }
  rmtree($backupDir);
  $::N->deleteProject($name);
};

#-------------------------------------------------------------------------------
#  Issue 74: case sensitive search
#-------------------------------------------------------------------------------
ntest "issue 74 case insensitive", {}, sub {
  my $proj="ISSUE74";
  my $xpath=$::N->createProject($proj);
  assertOK($xpath, "Failed to create project $proj");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"issue74"},
      {actualParameterName=>"caseSensitive", value=>"i"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue74_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check only 1 project was exported
    my $nb=$::N->getProperty("projectExported" , {jobId => $jobId})->findvalue("//value");
    assertEq(1, $nb, "incorrect number of project exported");

    # clean
    rmtree($backupDir);
    $::N->deleteProject($proj);
  }

};

#-------------------------------------------------------------------------------
#  Issue 83: heading and trailing spaces
#-------------------------------------------------------------------------------
ntest "issue 83 trailing spaces", {}, sub {
  my $proj=" ISSUE83 ";
  my $xpath=$::N->createProject($proj);
  assertOK($xpath, "Failed to create project $proj");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"issue83"},
      {actualParameterName=>"caseSensitive", value=>"i"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue83_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for project file file with heading and trailing space removed
    if (! -f "${backupDir}/Projects/ISSUE83/ISSUE83.xml") {
      fail("ISSUE83.xml project is missing");
    }
  }
  # clean
  rmtree($backupDir);
  $::N->deleteProject($proj);
};


#-------------------------------------------------------------------------------
#  Issue 88: heading and trailing spaces
#-------------------------------------------------------------------------------
ntest "issue 88 slash in resource", {}, sub {
  my $res="res_SA/issue88";
  my $xpath=$::N->createResource($res);
  assertOK($xpath, "Failed to create resource $res");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"issue88"},
      {actualParameterName=>"caseSensitive", value=>"i"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"true"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue88_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for resource file file with slash replaced by _
    if (! -f "${backupDir}/Resources/res_SA_issue88.xml") {
      fail("res_SA_issue88.xml resource is missing");
    } else {
      # clean
      rmtree($backupDir);
    }
  }
  $::N->deleteResource($res);
};


#-------------------------------------------------------------------------------
#  Issue 89: < and > in file names
#-------------------------------------------------------------------------------
ntest "issue 89 < and > in filenames", {}, sub {
  my $res="res<issue89>end";
  my $xpath=$::N->createResource($res);
  assertOK($xpath, "Failed to create resource $res");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"issue89"},
      {actualParameterName=>"caseSensitive", value=>"i"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"true"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue89_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for resource file file with slash replaced by _
    if (! -f "${backupDir}/Resources/res_issue89_end.xml") {
      fail("res_issue89_end.xml resource is missing");
    } else {
      # clean
      rmtree($backupDir);
    }
  }
  $::N->deleteResource($res);
};


#-------------------------------------------------------------------------------
#  Issue 90: project starting with _
#-------------------------------------------------------------------------------
ntest "issue 90 project starting with _", {}, sub {
  my $proj="_issue90";
  my $xpath=$::N->createProject($proj);
  assertOK($xpath, "Failed to create project $proj");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>"issue90"},
      {actualParameterName=>"caseSensitive", value=>"i"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"false"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"false"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue90_' .
                $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for project directory to exist
    if (! -d "${backupDir}/Projects/_issue90") {
      fail("_issue90 project is missing");
    } else {
      # clean
      rmtree($backupDir);
    }
  }
  $::N->deleteProject($proj);
};


#-------------------------------------------------------------------------------
#  Issue 87: empty pattern
#-------------------------------------------------------------------------------
ntest "issue 87 empty pattern", {}, sub {
  my $proj="issue87";

  my $xpath=$::N->deleteProject($proj);
  $xpath=$::N->createProject($proj);
  assertOK($xpath, "Failed to create project $proj");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"pattern", value=>""},
      {actualParameterName=>"caseSensitive", value=>"i"},
      {actualParameterName=>"exportDeploy", value=>"false"},
      {actualParameterName=>"exportGateways", value=>"false"},
      {actualParameterName=>"exportZones", value=>"true"},
      {actualParameterName=>"exportGroups", value=>"false"},
      {actualParameterName=>"exportResourcePools", value=>"false"},
      {actualParameterName=>"exportResources", value=>"false"},
      {actualParameterName=>"exportSteps", value=>"false"},
      {actualParameterName=>"exportUsers", value=>"true"},
      {actualParameterName=>"exportWorkspaces", value=>"false"},
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObject_Issue87_' .
		$::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for project directory to exist
    if (! -d "${backupDir}/Projects/$proj") {
      fail("$proj project is missing");
    }

    # check multiple projects were exported
    my $nb=$::N->getProperty("projectExported" , {jobId => $jobId})->findvalue("//value");
    if ($nb < 50) {
      fail("Not enough projects exported");
    }
    # check multiple users were exported
    $nb=$::N->getProperty("userExported" , {jobId => $jobId})->findvalue("//value");
    if ($nb < 5) {
      fail("Not enough users exported");
    }
    # check multiple zones were exported
    $nb=$::N->getProperty("zoneExported" , {jobId => $jobId})->findvalue("//value");
    if ($nb < 2) {
      fail("Not enough zones exported");
    }


  }
  # clean
  rmtree($backupDir);
  $::N->deleteProject($proj);
};


#-------------------------------------------------------------------------------
#  Issue 127: slash in name
#-------------------------------------------------------------------------------
ntest "issue 127 slash in project name with saveProjects", {}, sub {
  my $proj='issue127/win';
  my $projDir='issue127_win';
  my $xpath=$::N->createProject($proj);
  assertOK($xpath, "Failed to create project $proj");

  $xpath=$::N->createProcedure($proj, 'foo/bar');
  assertOK($xpath, "Failed to create procedure foo/bar");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveProjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"relocatable", value=>"1"},
      {actualParameterName=>"includeACLs", value=>"0"},
      {actualParameterName=>"includeNotifiers", value=>"0"}
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveProjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveProjects_Issue127_' .
		$::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveProjects should not error out");

    # check for project directory to exist
    if (! -d "${backupDir}/Projects/$projDir") {
      fail("$projDir project is missing");
    }


    # check for project file with slash replaced by _
    if (! -f "${backupDir}/Projects/$projDir/${projDir}.xml") {
      fail("${projDir}.xml project is missing");
    } else {
      # clean
      rmtree($backupDir);
    }

  }
  # clean
  $::N->deleteProject($proj);
};

#-------------------------------------------------------------------------------
#  Issue 161: save tags
#-------------------------------------------------------------------------------
ntest "issue 161 save tags", {}, sub {
  my $tag='tag161';
  my $xpath=$::N->createTag($tag);
  assertOK($xpath, "Failed to create tag $tag");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"relocatable", value=>"true"},
      {actualParameterName=>"includeACLs", value=>"false"},
      {actualParameterName=>"includeNotifiers", value=>"false"},
      {actualParameterName=>"pattern", value=>"161"}
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObjects_Issue161_Tags_' .
		  $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for project directory to exist
    if (! -d "${backupDir}/Tags") {
      fail("Tags directory is missing");
    }

    # check for project file with slash replaced by _
    if (! -f "${backupDir}/Tags/${tag}.xml") {
      fail("${tag}.xml tag file is missing");
    } else {
      # clean
      rmtree($backupDir);
    }

  }
  # clean
  $::N->deleteTag($tag);
};

#-------------------------------------------------------------------------------
#  Issue 161: save services
#-------------------------------------------------------------------------------
ntest "issue 161 save services", {}, sub {
  my $service='service161';
  my $proj="issue161";

  my $xpath=$::N->createProject($proj);
  assertOK($xpath, "Failed to create project $proj");

  $xpath=$::N->createService($proj, $service);
  assertOK($xpath, "Failed to create service $service in project $proj");

  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"relocatable", value=>"true"},
      {actualParameterName=>"includeACLs", value=>"false"},
      {actualParameterName=>"includeNotifiers", value=>"false"},
       {actualParameterName=>"pattern", value=>"161"}
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObjects_Issue161_Services_' .
		  $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for project directory to exist
    if (! -d "${backupDir}/Projects/$proj/Services") {
      fail("Services directory is missing in project $proj");
    }

    # check for project file with slash replaced by _
    if (! -f "${backupDir}/Projects/$proj/Services/${service}.xml") {
      fail("${service}.xml service file is missing in project $proj");
    } else {
      # clean
      rmtree($backupDir);
    }

  }
  # clean
  $::N->deleteProject($proj);
};

#-------------------------------------------------------------------------------
#  Issue 161: save persona
#-------------------------------------------------------------------------------
ntest "issue 161 save personas", {}, sub {
  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"relocatable", value=>"true"},
      {actualParameterName=>"includeACLs", value=>"false"},
      {actualParameterName=>"includeNotifiers", value=>"false"},
     ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObjects_Issue161_Personas_' .
		  $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for project directory to exist
    if (! -d "${backupDir}/Personas") {
      fail("Personas directory is missing");
    }

    # check for project file with slash replaced by _
    if (! -f "${backupDir}/Personas/Global.xml") {
      fail("Global.xml persona file is missing");
    } else {
      # clean
      rmtree($backupDir);
    }

  }
  # clean
};

#-------------------------------------------------------------------------------
#  Issue 161: save persona
#-------------------------------------------------------------------------------
ntest "issue 161 save persona pages", {}, sub {
  rmtree($backupDir);
  $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"saveAllObjects",
    actualParameter=>[
      {actualParameterName=>"pathname", value=>$backupDir},
      {actualParameterName=>"relocatable", value=>"true"},
      {actualParameterName=>"includeACLs", value=>"false"},
      {actualParameterName=>"includeNotifiers", value=>"false"},
     ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::saveAllObjects");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    $::N->setJobName($jobId, 'saveAllObjects_Issue161_Personas_' .
		  $::N->incrementProperty("/server/counters/EC-Admin/jobCounter")->findvalue("//value"));
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "saveAllObjects should not error out");

    # check for project directory to exist
    if (! -d "${backupDir}/PersonaPages") {
      fail("PersonaPages directory is missing");
    }

    # check for project file with slash replaced by _
    if (! -f "${backupDir}/PersonaPages/Users.xml") {
      fail("Users.xml persona page file is missing");
    } else {
      # clean
      rmtree($backupDir);
    }

  }
  # clean
};
1;
