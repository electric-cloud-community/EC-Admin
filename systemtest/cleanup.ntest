# -*-Perl-*-

# cleanup.ntest -
#
# check the cleanup procedures of EC-Admin plugin
#
# Copyright (c) 2015 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;

initCommander();
$::N=$adminSession;

# Check version to be able to run test with version 4.0 as well
# EC-Admin is a simple project for version 4.0
my $version=$::N->getVersions()->findvalue("//version")->value;

my $pluginName="EC-Admin";
my $xpath = $::N->getPlugin($pluginKey);
$pluginName = $xpath->findvalue("//pluginName")->value;

#create project to get jobImport
$::N->createProject("EC-Admin Management");

#-------------------------------------------------------------------------------
# Test procedure present.
#-------------------------------------------------------------------------------
ntest "cleanup_procedures", {}, sub {
	assertOK($::N->getProcedure($pluginName, "deleteWorkspaceOrphans"), "procedure deleteWorkspaceOrphans missing");
	assertOK($::N->getProcedure($pluginName, "jobsCleanup"), "procedure jobsCleanup missing");
	assertOK($::N->getProcedure($pluginName, "workflowCleanup"), "procedure workflowCleanup missing");
        if ($version ge "4.2") {
	  assertOK($::N->getProcedure($pluginName, "subJC_deleteWorkspace"), "procedure subJC_deleteWorkspace missing");
        }
};

#-------------------------------------------------------------------------------
# Issue #18: jobsCleanup fails with property error
#-------------------------------------------------------------------------------
ntest "Issue_18_humanSize", {}, sub {
  return if ($version lt "4.2");

    my $xpath = $::N->runProcedure($pluginName, {
	procedureName=>"subJC_deleteWorkspace",
	actualParameter=>[
	    {actualParameterName=>"computeUsage", value=>0},
	    {actualParameterName=>"executeDeletion", value=>0},
	    {actualParameterName=>"linDir", value=>"/tmp"},
	    {actualParameterName=>"winDir", value=>"C:\\TEMP"},
	    {actualParameterName=>"resName", value=>"local"}
	]});
    assertOK($xpath, "Failed to launch ${pluginName}::subJC_deleteWorkspace");
    if ($xpath) {
	#get new Job ID
        my $jobId  = $xpath->findvalue("//jobId");
        waitForJob($jobId);
	my $jobData  = $::N->getJobDetails($jobId);
        my $outcome = $jobData->findvalue("//job/outcome");
	assertEq("success", $outcome, "subJC_deleteWorkspace failed");
    }
};

#-------------------------------------------------------------------------------
# sub procedure to help calling jobsCleanup multiple times
#  Takes the parameters are an input
#  and return the summary and outcome
#-------------------------------------------------------------------------------
sub callJobsCleanup{
    my ($computeUsage, $executeDeletion, $jobLevel, $pattern, $jobProp, $days)=@_;

    my $xpath = $::N->runProcedure($pluginName, {
        procedureName=>"jobsCleanup",
        actualParameter=>[
            {actualParameterName=>"computeUsage", value=>$computeUsage},
            {actualParameterName=>"executeDeletion", value=>$executeDeletion},
            {actualParameterName=>"jobLevel", value=>$jobLevel},
            {actualParameterName=>"jobPatternMatching", value=>$pattern},
            {actualParameterName=>"jobProperty", value=>$jobProp},
            {actualParameterName=>"olderThan", value=>$days}
        ]});
    assertOK($xpath, "Failed to launch ${pluginName}::jobsCleanup");
    if ($xpath) {
        #get new Job ID
        my $jobId  = $xpath->findvalue("//jobId");
        waitForJob($jobId);
        my $jobData  = $::N->getJobDetails($jobId);

        my $jsId = $jobData->findvalue("//job/jobStep[stepName='deleteJobs']/jobStepId");
        my $summary=$::N->getProperty("summary", {jobStepId=>$jsId})->findvalue("//value");
        my $outcome = $jobData->findvalue("//job/outcome");
	my $nbJobs = $::N->getProperty("numberOfJobs", {jobId => $jobId})->findvalue("//value");

        return($summary, $outcome, $nbJobs, $jobId);
    }
    return("", "", -1);
}

#-------------------------------------------------------------------------------
#  Load some old jobs
#-------------------------------------------------------------------------------
sub loadJob {
  my $name=shift;
  my $dir="cleanup";

  $dir="cleanup.4.0" if ($version lt "4.2");
  my $xpath= $::N->import({file=>$::gWorkingDirectory . "/data/$dir/$name.xml", force=>1});
  assertOK($xpath, "$name job import failed");
}


#-------------------------------------------------------------------------------
# Test job Delete
#-------------------------------------------------------------------------------
ntest "jobsCleanup", {}, sub {
    my ($summary, $outcome, $nbJobs);

    loadJob("success");
    loadJob("error");
    loadJob("warning");
    loadJob("aborted");

    # Report mode
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "false","All", "", "doNotDelete", 365);
    assertEq("success", $outcome, "report mode failed");
    assertEq("", $summary, "report mode should succeed");
    assertEq("4", $nbJobs, "report mode should return 4 jobs");

    # Delete mode: 1 aborted job
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "Aborted", "", "doNotDelete", 365);
    assertEq("success", $outcome, "aborted test failed");
    assertEq("1 jobs deleted", $summary, "wrong number of aborted jobs deleted");

    # Delete mode: 1 error job
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "Error", "", "doNotDelete", 365);
    assertEq("success", $outcome, "error test failed");
    assertEq("1 jobs deleted", $summary, "wrong number of error jobs deleted");

    sleep(1);

    # Delete mode: 2 jobs (1 success and 1 warning)
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "All", "", "doNotDelete", 365);
    assertEq("success", $outcome, "error test failed");
    assertEq("2 jobs deleted", $summary, "wrong number of jobs deleted");

    sleep(1);

    # Delete mode: nothing to delete anymore
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "All", "", "doNotDelete", 365);
    assertEq("success", $outcome, "error test failed");
    assertEq("0 jobs deleted", $summary, "no job to delete");

};

#-------------------------------------------------------------------------------
# Test local workspace on disable machine
#-------------------------------------------------------------------------------
ntest "local_workspace_on_disable_machine", {}, sub {
    my ($summary, $outcome, $nbJobs);

    loadJob("localwin");

    $::N->modifyResource("ecadmin-win", {resourceDisabled => 1});

    # Report mode
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true","All", "", "doNotDelete", 365);
    assertEq("success", $outcome, "local win mode failed");
    assertEq("1 jobs deleted", $summary, "local win mode should succeed");
    assertEq("1", $nbJobs, "local win mode should return 4 jobs");
};

#-------------------------------------------------------------------------------
# Test local workspace on linux machine: Issue #21
#-------------------------------------------------------------------------------
ntest "Issue_21_local_workspace_on_linux_machine", {}, sub {
    my ($summary, $outcome, $nbJobs);

    loadJob("localWks_linux");
    $::N->modifyResource("ecadmin-lin",  {resourceDisabled => 0});

    # Report mode
    ($summary, $outcome, $nbJobs)=callJobsCleanup(0, "true", "All", "", "doNotDelete", 365);
    assertEq("success", $outcome, "local linux mode failed");
    assertEq("1 jobs deleted", $summary, "local win mode should succeed");
    assertEq("1", $nbJobs, "local win mode should return 4 jobs");
};

#-------------------------------------------------------------------------------
# Test workspace with error: Issue #114
#-------------------------------------------------------------------------------
ntest "Issue_114_workspace_error", {}, sub {
    my ($summary, $outcome, $nbJobs, $jobId);

    loadJob("missingWorkspace");
    $::N->modifyWorkspace("Windows", {workspaceDisabled => 1});
    $::N->modifyResource("win7",  {resourceDisabled => 0});

    # Report mode
    ($summary, $outcome, $nbJobs, $jobId)=callJobsCleanup(0, "true", "All", "", "doNotDelete", 365);
    assertEq("error", $outcome, " invalid workspace should return error");

    # confirm step is failing with AGENT_INVALID_MESSAGE
    my $jobData  = $::N->findJobSteps({
      jobId => $jobId,
      select => [{propertyName => "stepName"}],
      filter => [{propertyName => "stepName",
                       operator => "equals",
                       operand1 => "deleteWorkspaceDirectory"}]
    });
    my $errCode = $jobData->findvalue("//jobStep/errorCode");
    assertEq("AGENT_INVALID_MESSAGE", $errCode, "invalid workspace should return INVALID step error");
};

# delete project to get jobImport
$::N->deleteProject("EC-Admin Management");

1;
