# -*-Perl-*-

# schedules.ntest -
#
# check the schedule procedures of EC-Admin plugin
#
# Copyright (c) 2015 Electric Cloud, Inc.
# All rights reserved

use strict;
use warnings;
use ECTest;

initCommander();
$::N=$adminSession;

my $pluginKey = "EC-Admin";
my $xpath = $::N->getPlugin($pluginKey);
my $pluginName = $xpath->findvalue("//pluginName")->value;

#-------------------------------------------------------------------------------
# Test procedure present.
#-------------------------------------------------------------------------------
ntest "checkProcedures", {}, sub {
  assertOK($::N->getProcedure($pluginName, "performanceMetrics"), "procedure performanceMetrics missing");
  assertOK($::N->getProcedure($pluginName, "subPM-deploymentSize"), "subPM-deploymentSize procedure missing");
  assertOK($::N->getProcedure($pluginName, "subPM-jobStats"), "subPM-jobStats procedure missing");
  assertOK($::N->getProcedure($pluginName, "subPM-localUsage"), "subPM-localUsage procedure missing");
  assertOK($::N->getProcedure($pluginName, "subPM-performance"), "subPM-performance procedure missing");
};


#-------------------------------------------------------------------------------
# Test number of cores is greater than 1
#-------------------------------------------------------------------------------
ntest "checkNumberOfCores", {}, sub {
  my $xpath = $::N->runProcedure($pluginName, {
    procedureName=>"performanceMetrics",
    actualParameter=>[
      {actualParameterName=>"debugMode",        value =>0},
      {actualParameterName=>"numberOfGB",       value=>1},
      {actualParameterName=>"numberOfJobSteps", value=>1},
      {actualParameterName=>"numberOfSteps",    value => 1}
    ]
  });
  assertOK($xpath, "Failed to launch EC-Admin::performanceMetrics");
  if ($xpath) {
    #get new Job ID
    my $jobId  = $xpath->findvalue("//jobId");
    waitForJob($jobId);
    my $jobData  = $::N->getJobDetails($jobId);
    my $outcome = $jobData->findvalue("//job/outcome");
    assertNe("error", $outcome, "performanceMetrics should not error out");

    # check for number of Core property
    my $nbCores=$::N->getProperty("numberOfCores", {jobId=>$jobId})->findvalue("//value");
    assert(1, "<", $nbCores, "Number of Cores should be greater than 1");
  }
};

1;
